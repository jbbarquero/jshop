// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.malsolo.jshop.web;

import com.malsolo.jshop.domain.Brand;
import com.malsolo.jshop.domain.ElectricalAppliance;
import com.malsolo.jshop.domain.Kind;
import com.malsolo.jshop.domain.StockLine;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ElectricalApplianceController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String ElectricalApplianceController.create(@Valid ElectricalAppliance electricalAppliance, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("electricalAppliance", electricalAppliance);
            return "electricalappliances/create";
        }
        uiModel.asMap().clear();
        electricalAppliance.persist();
        return "redirect:/electricalappliances/" + encodeUrlPathSegment(electricalAppliance.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String ElectricalApplianceController.createForm(Model uiModel) {
        uiModel.addAttribute("electricalAppliance", new ElectricalAppliance());
        List dependencies = new ArrayList();
        if (Kind.countKinds() == 0) {
            dependencies.add(new String[]{"kind", "kinds"});
        }
        if (Brand.countBrands() == 0) {
            dependencies.add(new String[]{"brand", "brands"});
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "electricalappliances/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String ElectricalApplianceController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("electricalappliance", ElectricalAppliance.findElectricalAppliance(id));
        uiModel.addAttribute("itemId", id);
        return "electricalappliances/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String ElectricalApplianceController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("electricalappliances", ElectricalAppliance.findElectricalApplianceEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) ElectricalAppliance.countElectricalAppliances() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("electricalappliances", ElectricalAppliance.findAllElectricalAppliances());
        }
        return "electricalappliances/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String ElectricalApplianceController.update(@Valid ElectricalAppliance electricalAppliance, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("electricalAppliance", electricalAppliance);
            return "electricalappliances/update";
        }
        uiModel.asMap().clear();
        electricalAppliance.merge();
        return "redirect:/electricalappliances/" + encodeUrlPathSegment(electricalAppliance.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String ElectricalApplianceController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("electricalAppliance", ElectricalAppliance.findElectricalAppliance(id));
        return "electricalappliances/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String ElectricalApplianceController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        ElectricalAppliance.findElectricalAppliance(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/electricalappliances";
    }
    
    @ModelAttribute("brands")
    public Collection<Brand> ElectricalApplianceController.populateBrands() {
        return Brand.findAllBrands();
    }
    
    @ModelAttribute("electricalappliances")
    public java.util.Collection<ElectricalAppliance> ElectricalApplianceController.populateElectricalAppliances() {
        return ElectricalAppliance.findAllElectricalAppliances();
    }
    
    @ModelAttribute("kinds")
    public java.util.Collection<Kind> ElectricalApplianceController.populateKinds() {
        return Kind.findAllKinds();
    }
    
    @ModelAttribute("stocklines")
    public java.util.Collection<StockLine> ElectricalApplianceController.populateStockLines() {
        return StockLine.findAllStockLines();
    }
    
    String ElectricalApplianceController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
